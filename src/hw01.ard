-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/documentation/getting-started/download
--    В IDEA можно просто импортировать данный проект

-- +

-- 2. Определите аналоги следующих функций на языке Haskell
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y
\func apply (f : Nat -> Nat) (x : Nat) => f x
\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг

\import lect01 \hiding (+, *)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 2 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 3 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (x t e : Bool) : Bool \elim x
  | true => t
  | false => e

-- 5. Определите || через if

\func \infixr 2 || (x y : Bool) : Bool => if x true (if y true false)

-- 6. Определите возведение в степень и факториал для натуральных чисел

\open Nat \hiding (-, div) -- Здесь лежат + и *

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | 1 => x
  | suc y' => x * (x ^ y')

\func fac (x : Nat) : Nat \elim x
  | 0 => 1
  | suc x' \as x => x * fac x'

-- 7. Определите mod и gcd

\func mod (x y : Nat) => x - y * (x `div` y)

\func modTest1 : mod 11 5 = 1 => idp
\func modTest2 : mod 3 5 = 3 => idp
\func modTest3 : mod 0 5 = 0 => idp
\func modTest4 : mod 5 0 = 5 => idp
\func modTest5 : mod 10 5 = 0 => idp

\func gcd (x y : Nat) : Nat => gcd' (x + y) x y
    \where {
      \func gcd' (fuel x y : Nat) : Nat \elim fuel, x, y
        | _, 0, y => y
        | _, x, 0 => x
        | 0, _, _ => 0
        | suc fuel', x, y => gcd' fuel' y (x `mod` y)
    }

\func gcdTest1 : gcd 100 5 = 5 => idp
\func gcdTest2 : gcd 5 100 = 5 => idp
\func gcdTest3 : gcd 0 5 = 5 => idp
\func gcdTest4 : gcd 5 0 = 5 => idp