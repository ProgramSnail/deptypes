\import Data.Bool
\import Data.Or
\import Logic
\import Meta
\import lect02 (List, nil, cons)
\import hw01 (fac)

-- 1. Определите полиморфный tail для списков

\func tail {A : \Type} (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента

\func sortedInsert {A : \Type} (less : A -> A -> Bool) (xs : List A) (y : A) : List A \elim xs
  | nil => cons y nil
  | cons x xs => if (less y x) (cons y (cons x xs)) (cons x (sortedInsert less xs y))

\func sortWithAcc {A : \Type} (less : A -> A -> Bool) (xs : List A) (acc : List A) : List A \elim xs
  | nil => acc
  | cons x xs => sortWithAcc less xs (sortedInsert less acc x)

\func sort {A : \Type}(less : A -> A -> Bool) (xs : List A)  : List A => sortWithAcc less xs nil

--

\func lessBool (x y : Bool) : Bool \elim x, y
  | false, true => true
  | _, _ => false
\func sortTest1 : sort lessBool nil = nil => idp
\func sortTest2 : sort lessBool (cons true nil) = cons true nil => idp
\func sortTest3 : sort lessBool (cons true (cons false nil)) = cons false (cons true nil) => idp
\func sortTest4 : sort lessBool (cons true (cons false (cons true (cons false (cons false nil)))))
                               = cons false (cons false (cons false (cons true (cons true nil)))) => idp

-- 3. Докажите ассоциативность && и ||

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z) \elim x
  | true => idp
  | false => idp

\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z) \elim x
  | true => idp
  | false => idp

-- 4. Докажите, что fac 3 равно 6
\func fac3=6 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (можно решить любые 2 из 3 задач)

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R \elim h
  | inl p => f p
  | inr q => g q

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p _ => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (можно решить любые 2 из 3 задач)

-- t4 : (P -> Q -> R) -> P /\ Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (h : \Sigma P Q) : R => f h.1 h.2
-- t5 : (P or Q -> P /\ Q) -> (P -> Q) /\ (Q -> P)
\func t5 {P Q : \Type} (f : Or P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) => (\lam p => (f (inl p)).2, \lam q => (f (inr q)).1)
-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q => f (\lam g => g (\lam h => f (\lam _ => h)))

-- 7. Докажите следующие утверждения

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p => h (3, p)

-- 8. Сформулируйте и докажите следующие утверждения

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x),
-- то существует x : Nat для которого верно Q(x)
\func s3 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> P x -> Q x) (k : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) => (k.1, h k.1 k.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно
\func s4-or {P Q : \Type} (h : Or (P -> Empty) (Q -> Empty)) (p : P) : Q -> Empty \elim h
  | inl not-p => \lam _ => not-p p
  | inr not-q => not-q

\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty
  => \lam q => s4-or (h 3) q